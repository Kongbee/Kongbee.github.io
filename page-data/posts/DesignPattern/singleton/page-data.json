{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/DesignPattern/singleton/","result":{"data":{"markdownRemark":{"id":"6a35992e-de91-587a-994f-c5f685385da5","html":"<h3 id=\"하나의-클래스에-오직-하나의-인스턴스만-가지는-패턴입니다\" style=\"position:relative;\"><a href=\"#%ED%95%98%EB%82%98%EC%9D%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90-%EC%98%A4%EC%A7%81-%ED%95%98%EB%82%98%EC%9D%98-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EB%A7%8C-%EA%B0%80%EC%A7%80%EB%8A%94-%ED%8C%A8%ED%84%B4%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-label=\"하나의 클래스에 오직 하나의 인스턴스만 가지는 패턴입니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하나의 클래스에 오직 하나의 인스턴스만 가지는 패턴입니다.</h3>\n<hr>\n<h2 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h2>\n<p>인스턴스를 다른 모듈들이 공유하며 사용하기 때문에 인스턴스를 생성할 때 드는 비용이 줄어든다.</p>\n<h2 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h2>\n<p>의존성이 높아지는 단점이 있다.</p>\n<p>-> TDD를 할 때 <strong>독립적인</strong> 인스턴스를 만들기 어려워서 걸림돌이 된다.</p>\n<h2 id=\"단점-해결방법\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90-%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95\" aria-label=\"단점 해결방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점 해결방법</h2>\n<p><strong>의존성 주입</strong>을 통해 모듈간의 결합도를 느슨하게 만들어 해결할 수 있다.</p>\n<hr>\n<h2 id=\"코드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">class</span>  <span class=\"token class-name\">Singleton</span>  <span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">private</span>  <span class=\"token keyword\">static</span>  <span class=\"token keyword\">class</span>  singleInstanceHolder  <span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">private</span>  <span class=\"token keyword\">static</span>  <span class=\"token keyword\">final</span>  <span class=\"token class-name\">Singleton</span> <span class=\"token constant\">INSTANCE</span> <span class=\"token operator\">=</span>  <span class=\"token keyword\">new</span>  <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span>  <span class=\"token keyword\">static</span>  <span class=\"token class-name\">Singleton</span>  <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">return</span> singleInstanceHolder<span class=\"token punctuation\">.</span><span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token keyword\">public</span>  <span class=\"token keyword\">class</span>  <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">public</span>  <span class=\"token keyword\">static</span>  <span class=\"token keyword\">void</span>  <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span>  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token class-name\">Singleton</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Singleton</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span>  <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n\n705927765\n\n705927765\n\ntrue\n\n*/</span>\n</code></pre></div>\n<ol>\n<li>클래스안에 클래스(Holder), static이며 중첩된 클래스인 singleInstanceHolder를</li>\n</ol>\n<p>기반으로 객체를 선언했기 때문에 한 번만 로드되므로 싱글톤 클래스의 인스턴스는 애플리케이션 당 하나만 존재하며</p>\n<p>클래스가 두 번 로드되지 않기 때문에 두 스레드가 동일한 JVM에서 2개의 인스턴스를 생성할 수 없습니다.</p>\n<p>그렇기 때문에 동기화, 즉 synchronized를 신경쓰지 않아도 됩니다.</p>\n<ol start=\"2\">\n<li>\n<p>final 키워드를 통해서 read only 즉, 다시 값이 할당되지 않도록 했습니다.</p>\n</li>\n<li>\n<p>중첩클래스 Holder로 만들었기 때문에 싱글톤 클래스가 로드될 때 클래스가 메모리에 로드되지 않고</p>\n</li>\n</ol>\n<p>어떠한 모듈에서 getInstance()메서드가 호출할 때 싱글톤 객체를 최초로 생성 및 리턴하게 됩니다.</p>","fields":{"slug":"/posts/DesignPattern/singleton/","tagSlugs":null},"frontmatter":{"date":"2022-12-14T10:13:04.000Z","description":"하나의 클래스에 오직 하나의 인스턴스만 가지는 패턴입니다.","tags":null,"title":"Singleton 패턴","socialImage":null}}},"pageContext":{"slug":"/posts/DesignPattern/singleton/"}},"staticQueryHashes":["251939775","2764776372","401334301"]}