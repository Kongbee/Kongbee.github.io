{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/DataStructure/factory/","result":{"data":{"markdownRemark":{"id":"a08236b5-eb98-5861-bb3c-9cf9f3dd2927","html":"<h2 id=\"array-vs-arraylist\" style=\"position:relative;\"><a href=\"#array-vs-arraylist\" aria-label=\"array vs arraylist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array vs ArrayList</h2>\n<p>Array와 ArrayList의 차이점 == 불변 or 가변</p>\n<p>ArrayList의 가변적 요소는 어떻게 구현이 되는가?</p>\n<ul>\n<li>요소들이 처음 할당한 메모리(pre-allocation) 이상으로 많아지면 resizing을 한다</li>\n<li>100개의 메모리가 다 찼다면 -> 200개 크기의 메모리 생성 -> 기존 100개 복사 -> 101부터 순차적 추가</li>\n</ul>","fields":{"slug":"/posts/DataStructure/factory/","tagSlugs":null},"frontmatter":{"date":"2023-01-10T08:35:10.000Z","description":"","tags":null,"title":"자료구조","socialImage":null}}},"pageContext":{"slug":"/posts/DataStructure/factory/"}},"staticQueryHashes":["251939775","2764776372","401334301"]}